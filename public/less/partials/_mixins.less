@import "_lesshat";
/*

Rems without having to write the px fallback each time.

@prop - The property to output.
@val  - The value to convert; Default is px to rem but can be rem to px.

Compatible in everything.
*/
.remFallback(@prop, @val) when (isunit(@val, px)){
  @num : unit(@val);
  @rem : @num / 10;

  @remVal : unit(@rem, rem);

  @{prop} : @val;
  @{prop} : @remVal;
}

.remFallback(@prop, @val) when (isunit(@val, rem)){
  @num : unit(@val);
  @px : @num * 10;

  @pxVal : unit(@px, px);

  @{prop} : @pxVal;
  @{prop} : @val;
}

.remFallback(@prop, @val) when(default()){

  @num : unit(@val);
  @rem : @num / 10;

  @pxVal : unit(@num, px);
  @remVal : unit(@rem, rem);

  @{prop} : @pxVal;
  @{prop} : @remVal;

}

/*
Alias for .remFallback

@prop - The property to output.
@val  - The value to convert; Default is px to rem but can be rem to px.

Compatible in everything.
*/
.rf(@prop, @val){
  .remFallback(@prop, @val);
}




.clear_margins{
  -webkit-margin-before: 0;
  -webkit-margin-after: 0;
  -webkit-margin-start: 0;
  -webkit-margin-end: 0;
  -moz-margin-before: 0;
  -moz-margin-after: 0;
  -moz-margin-start: 0;
  -moz-margin-end: 0;
}
.clear_paddings{
  -webkit-padding-start: 0;
  -webkit-padding-end: 0;
  -moz-padding-start: 0;
  -moz-padding-end: 0;
}
.clear_all{
  .clear_margins;
  .clear_paddings;
}